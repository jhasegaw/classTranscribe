[{"text":"Hello! Let's talk about how we can use scanf and sscanf and fscanf to read some data and convert that into say integers or floats or strings","width":739},{"text":"so we can actually use those values inside our variables","width":232},{"text":"alright, so, I'll start by using sscanf","width":207},{"text":"which can parse data inside a string","width":184},{"text":"inside memory","width":109},{"text":"so for example, let's have a little bit of data here","width":136},{"text":"I'll have my data be my name and a score","width":454},{"text":"and I want to take that and pull it apart into a string and an integer","width":385},{"text":"so I'll have a little buffer here, say, up to twenty characters","width":343},{"text":"and a little integer here","width":102},{"text":"and I could set this to be equal to some arbitrary value. we'll see why in a little bit","width":434},{"text":"and then I'm going to say \"okay, sscanf please read from this string array and what I'd like you to do is convert that into a string followed by one or more spaces and then an integer value\"","width":1146},{"text":"alright so scanf is going to look at our memory starting at wherever our data is pointing at","width":359},{"text":"and, it's going to first of all look for a string until it comes across one space","width":357},{"text":"and then there can be actually multiple spaces in our data","width":155},{"text":"and then after that, it's going to treat the rest of the string as an integer","width":287},{"text":"okay, now, our format specifiers say the kind of data that we want to interpret and also the number of bytes that should be written to when it is trying to parse its data","width":730},{"text":"so we better tell it where to exactly put these things","width":154},{"text":"so for our string, we want it to write it into a buffer","width":234},{"text":"and for the score, we want to write it into our score variable","width":199},{"text":"but hold on a moment","width":114},{"text":"when we say \"buffer\" yes that gives us the beginning address of our array","width":372},{"text":"but not for score","width":63},{"text":"score is just going to give us whatever value score happens to hold","width":170},{"text":"in this case, negative forty two","width":124},{"text":"that's not what we need","width":69},{"text":"we actually want the address of this variable","width":132},{"text":"so we're going to say ampersand score","width":239},{"text":"so, lets read that and we'll print it out","width":271},{"text":"so here's the result and we'll say %s %d and we'll print the contents of the buffer and print the value of score","width":592},{"text":"so notice that scanf and printf, the arguments don't always look the same","width":266},{"text":"when we want to print out the values, we don't actually want to just print out the address of score","width":389},{"text":"we actually wanted to know what the value is","width":106},{"text":"great so that read that correctly","width":202},{"text":"scanf actually tells us something else which is how many arguments it correctly managed to parse","width":428},{"text":"so let's make a note of that and we'll print that out","width":299},{"text":"so, we'll say %d here","width":313},{"text":"print out the result in our printf statement here","width":183},{"text":"so now when we run it, we'll see that sscanf managed to read both iterms","width":384},{"text":"I got result two","width":90},{"text":"fantastic. so that's useful. now we can write robust programs to check if we really did write into both variables","width":521},{"text":"now you might be worried that scanf could result in a buffer overflow","width":286},{"text":"and, in fact, in our current code, you'd be right","width":168},{"text":"so if I had a very long name with no spaces here","width":419},{"text":"then that's longer than our buffer","width":229},{"text":"so what we need to do is tell scanf just how big our buffer is","width":209},{"text":"so in this case, it should be nineteen","width":207},{"text":"because we're setting scanf how many character to read from the input","width":321},{"text":"and our buffer, of course, if going to need one extra one to hold the terminating byte for this string","width":397},{"text":"so let's run this now","width":483},{"text":"and you'll see that first of all the name is truncated and that secondly, the return value of our scanf call here was one","width":538},{"text":"and it only managed to read into the buffer","width":259},{"text":"it gave up trying to read the integer because our buffer wasn't long enough","width":190},{"text":"and, in fact, our score variable still contained its original value","width":305},{"text":"of negative forty two","width":123},{"text":"so good defensive programs must check that the return value is reasonable","width":389},{"text":"also, when writing scanf or sscanf or fscanf, it's always a good idea to carefully check to see whether you should be looking at the address of the variable or if the variable itself actually is a pointer","width":783},{"text":"and is already going to give you the memory address that you'd like scanf to change","width":532},{"text":"alright so we've read data from a string ","width":263},{"text":"we can also parse data from a file stream and how can we do that? well you can use not sscanf but fscanf","width":663},{"text":"and if you did that, you better give it a file stream","width":182},{"text":"there's one called stdin already","width":209},{"text":"if we didn't want to use that, then we could open up a file using fopen and then pass in the file handle here","width":564},{"text":"and reading from stdin is such a common occurance that in fact there's another form of this which is just say scanf","width":699},{"text":"and if you do that, that means \"hey, just read from stdin\"","width":188},{"text":"so now, let's run our program here","width":555},{"text":"and, now it's waiting for input","width":99},{"text":"so let me typing something","width":130},{"text":"I'll say \"Angrave one hundred\"","width":324},{"text":"great! and it managed to parse both variables","width":177},{"text":"okay so that's enough introduction to scanf","width":188},{"text":"remember this next time you're trying to read 3d data and points and you want to say convert those ASCII numbers into actual floats and doubles","width":640},{"text":"and also remember that its important to read exactly how scanf uses these format specifiers because its not quite the same as printf","width":624},{"text":"alright, that's it for me. time for you to play. bye for now","width":278}]