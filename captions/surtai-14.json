[{"text":"Hi, welcome!","width":94},{"text":"let's talk about creating more complicated data types in C","width":294},{"text":"so far, we've talked about integer and character pointers","width":220},{"text":"what if we wanted to make something more complicated like a linked list?","width":196},{"text":"for that, we will use a struct","width":193},{"text":"so, let's say we've got a struct and we'll say my struct I'll call it say Link","width":561},{"text":"and what should we have inside this?","width":80},{"text":"well, we've have a value to store and we'll need a pointer to the next link","width":310},{"text":"we'll need to know where the next link is in memory","width":117},{"text":"so, we can say struct Link and it's a pointer to that","width":368},{"text":"so, don't forget the asterisk","width":80},{"text":"so that's our little struct here. a semicolon is required at the end","width":297},{"text":"but it's kind of painful to keep saying \"struct Link\" every time I want to refer to this type","width":412},{"text":"so I can have a link here called \"one\" for example","width":204},{"text":"so quite often, we can use, or you'll find that people use \"typedef\"","width":277},{"text":"to say \"here's an alias\" and I can use typedef with any kind of type","width":417},{"text":"I can even use it with integers","width":139},{"text":"for example, I can say typedef number","width":168},{"text":"now I can say \"number x\" instead of \"int x\"","width":368},{"text":"but today we're going to use typedef for our link","width":190},{"text":"so we'll say instead of having to write struct Link, I'll call this my link type","width":416},{"text":"so now I've got my link type, I can make a link","width":238},{"text":"here's one","width":63},{"text":"and if I declare variables like this, outside of my functions, then they live forever","width":614},{"text":"and, let me write my main method here","width":326},{"text":"so, my link called \"one\" and my value live forever","width":395},{"text":"and in fact, they're initialized","width":87},{"text":"so their bitwise pattern is just all zeros","width":212},{"text":"so in other words, my value will be zero and the link \"one\" will have a value of zero and its next pointer will have a value of zero as well","width":740},{"text":"if we wanted to change that, then we could say one.value equals fourty two","width":369},{"text":"and one.next equals well, where should we put it?","width":237},{"text":"well where should we send it next?","width":98},{"text":"we could say \"NULL\" if we wish to use NULL, actually we have to #include <stdlib.h>","width":570},{"text":"to have NULL defined","width":185},{"text":"and now our Link says \"I'm the last thing. there's no one after me\"","width":354},{"text":"if we wanted to be particularly crazy, we can make the next pointer point to the very same link","width":425},{"text":"we do that by saying \"one\" except we don't want \"one\" we want the address of \"one\"","width":350},{"text":"we need a pointer to \"one\"","width":70},{"text":"so how do I do that? I use ampersand to say \"give me the address\" of this","width":281},{"text":"so that gives me a pointer to a link","width":121},{"text":"well thats great if we only need one link","width":114},{"text":"but that's not much of a linked list","width":150},{"text":"let's actually work out then how we can actually make a whole load of links","width":292},{"text":"for that, we'll use some heap memory","width":148},{"text":"and I'm going to use malloc which is also declared inside stdlib.h","width":268},{"text":"so, I need some memory","width":160},{"text":"how many bytes do I need?","width":109},{"text":"for that, I can say: \"give me the sizeof my link structure\"","width":225},{"text":"in other words, give me the size of link_t","width":143},{"text":"be careful you don't put an asterisk here otherwise, you'll only be reserving enough bytes for a pointer","width":362},{"text":"in other words, 4 bytes or so","width":109},{"text":"that's not enough for what we need","width":104},{"text":"we need the size of our whole struct","width":247},{"text":"so that gives me back a pointer and I actually want to cast it so that it's type pointer to a link_t","width":528},{"text":"so I can now store that inside a variable","width":227},{"text":"and I can have it as my first pointer","width":261},{"text":"so, malloc does not initialize the actual memory. it just simply reserves it for us","width":371},{"text":"just allocates it for us.","width":89},{"text":"we better make sure that our Link is properly initialized","width":228},{"text":"so for my first Link, I want to set its value to something","width":353},{"text":"and I need to set its \"next\" pointer to something","width":225},{"text":"so for example, I can set it to NULL","width":107},{"text":"or if I, oops, let me change that to put a one","width":271},{"text":"or if I wanted to make it point to itself, I can say \"ptr1\"","width":355},{"text":"if I had two links, let's do that","width":347},{"text":"then I can again set up the values. be very careful when copying and pasting code that you've actually edited it correctly","width":543},{"text":"I can now make my first link ptr1 its next point to next ptr","width":407},{"text":"and the next link, its next pointer can go nowhere","width":440},{"text":"so, there's my simple linked list","width":205},{"text":"more complicated links might have a previous pointer as well","width":246},{"text":"so you can navigate both in the forwards and backwards direction throughout the linked list","width":506},{"text":"okay, so, let's now finally compile this and check that it works","width":403},{"text":"our program compiles correctly, but to be a well-behaved program, really we should free up the memory as well","width":720},{"text":"so don't forget for every malloc you do, we should responsible for freeing up that memory once and once only","width":566},{"text":"so free(ptr1) and free(ptr2)","width":324},{"text":"also, a more robust version of this program would check that malloc actually succeeded","width":377},{"text":"that we actually really got the bytes","width":143},{"text":"that would be something important to do if your program ran for a very long time","width":322},{"text":"or needed very large unknown amounts of memory","width":319},{"text":"so that's how we make linked lists in C","width":184},{"text":"now it's time for you to play. bye!","width":161}]