[{"text":"Okay so let's talk about how we can make it easier to create links and destroy them","width":335},{"text":"so i've changed my link class a little bit so now each link can have a key and a value","width":297},{"text":"in addition to the next pointer","width":129},{"text":"the pointer to the next link","width":106},{"text":"okay so let's make some methods to create links and destroy them","width":440},{"text":"we'll do the create one first","width":123},{"text":"so it's going to return a pointer to a link","width":227},{"text":"and i might call it say link_create and I'll expect a key and I'll expect a value","width":721},{"text":"so that'll give me two pointers","width":159},{"text":"if i wish to debug this I could have a printf in here saying hey creating link and I could have what the key and values are for example","width":737},{"text":"right so i need to get some memory","width":165},{"text":"let's get some memory from the heap because we want our link to last for a long time until we decide to destroy it","width":445},{"text":"so i'll say malloc give me some memory and how much well i better ask for how big is my memory structure link_t","width":545},{"text":"and i will cast that return type as a pointer to my link object","width":445},{"text":"why do i do that","width":63},{"text":"well i want to be able to reference the sub parts","width":170},{"text":"the components of my struct","width":119},{"text":"and i will call that say result and i need to initialize my pointer","width":481},{"text":"so now i've got that I can set the key to be a key and the value to be the value","width":499},{"text":"now when i do this i am copying the pointers i'm not creating new strings","width":444},{"text":"so in other words i've now got a pointer called key and it's looking at exactly the same string array as the parameter is","width":499},{"text":"i haven't made any new string arrays","width":203},{"text":"so let's remember that when i return this","width":214},{"text":"that those pointers better be valid for the lifetime of the link","width":288},{"text":"well that's fine if I knew for example that this will always be used with string constants or I am taking control of those values that I send in and I happen to know that their lifetime is longer than the link's lifetime","width":1068},{"text":"so if that's the case then my code is relatively simple like this","width":214},{"text":"and destroying the link is also relatively simple","width":225},{"text":"so let's write a link destroy method destroy","width":205},{"text":"which takes a pointer to the link that is going to disappear so we can call that just p","width":437},{"text":"and what do i need to do in here","width":104},{"text":"well i can simply return the memory back","width":190},{"text":"okay so this works we could do a little better than this","width":253},{"text":"we could actually do some defensive programming here","width":150},{"text":"where we also destroy the information inside that link","width":381},{"text":"so for that i can use memory set","width":190},{"text":"so memset where I give it a pointer that I want to use","width":325},{"text":"the value will be zero the number of bytes can be the size of my link","width":279},{"text":"so this assures that i don't have any dangling pointers","width":258},{"text":"i have destroyed the key and value pointers","width":232},{"text":"i've set them back to null and anything else inside my link has been set to null","width":247},{"text":"so if someone happens to have a pointer to this link and they try to use the contents straight away then it will fail it will be null","width":521},{"text":"and secondly we are freeing it to say okay this memory can now be reused for other purposes","width":356},{"text":"so that's my link destroy method","width":158},{"text":"now suppose we discover that our strings we don't control the lifetime of these string arrays","width":483},{"text":"and that actually we should make copies of them","width":186},{"text":"so how can i do that","width":89},{"text":"well there's a method called strdup so let's do that strdup and this gives me back a pointer to a new string ","width":697},{"text":"a new character array that has been created on the heap","width":223},{"text":"and it's just a copy of that existing character array that we passed it","width":296},{"text":"so let's create our new string arrays and use those","width":296},{"text":"if we do that then when I destroy the link I better free up the memory associated with my key and value","width":470},{"text":"so before ending here I should free up those pointers","width":344},{"text":"so I should call free on my key and free on my value pointer as well","width":641},{"text":"okay so there's my code now to start working with a link","width":780},{"text":"with my main method I will need to always know the beginning of my linked list","width":448},{"text":"so that sounds like a great thing to actually have as a global variable here","width":312},{"text":"so let me have my link pointer here and I can call it root","width":327},{"text":"and so the first link I make I can initialize root to that","width":316},{"text":"to that very first link","width":157},{"text":"okay so that's it for now, it's now time for you to play with creating more links","width":389},{"text":"bye","width":70}]