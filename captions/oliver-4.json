[{"text":"Hello, suppose we want to actually print out some integer values","width":312},{"text":"write() doesn't give us that fuctionality","width":206},{"text":"write() is the low level call that we make to the operating system","width":252},{"text":"to say \"look, here's a pointer to some memory and please take so many bytes from that memory and send it out to a file\"","width":527},{"text":"or, possibly, another device","width":113},{"text":"if we want to change a bit pattern into a sequence of characters because we want to read, say, one-seven for the value seventeen","width":533},{"text":"that's not something that the system does","width":118},{"text":"instead, we've got some C standard library calls that we can call","width":256},{"text":"that do this for us","width":144},{"text":"and they will wrap the call to write()","width":186},{"text":"so as an example, let's try printing something out","width":329},{"text":"we can say \"printf my value is\"","width":387},{"text":"and I can say \"%d\"","width":134},{"text":"this means that the next argument I give in printf() better be an integer value","width":444},{"text":"so the bit pattern we pass to printf() will be treated as an integer","width":294},{"text":"to be displayed","width":73},{"text":"so let's have a little variable called result","width":220},{"text":"and I can say result is sixty five","width":404},{"text":"if I attempt to run this, we're using printf(), we haven't declared it beforehand so we get a warning","width":490},{"text":"to say \"oh, you're just using it.\" and, what we should've done is actually declare the function signature of printf()","width":580},{"text":"and that I know from looking at the man pages","width":248},{"text":"is inside stdio.h","width":195},{"text":"if you're coming from a cpp background, there's no IO streams","width":234},{"text":"we dont have operator overloading. instead, let's use printf()","width":211},{"text":"so we've got \"my value is 65\"","width":153},{"text":"and, you'll see that actually this was printed out after the hello hello hello hello","width":572},{"text":"here's why: printf() has a buffer. the C libraries have a buffer","width":250},{"text":"so it's only going to call write() when that buffer is full","width":248},{"text":"or if we explicitly tell it to","width":103},{"text":"or if we finish a line","width":157},{"text":"so let's put a newline in here and run it again","width":280},{"text":"this time, we've compiled it, and we should see that \"my value is 65\" appear before my hellos","width":523},{"text":"so this time, because we sent a new line, printf() will be making that call to write()","width":443},{"text":"to send its buffer out to standard out","width":347},{"text":"so now we can actually print out the value of our file descriptor","width":318},{"text":"let's do that. after we've opened our file, I'll send \"fildes is\" and, we will print out fildes.","width":1358},{"text":"and, let's get rid of the first one","width":157},{"text":"and let's flush our little buffer by sending in a newline","width":409},{"text":"and we'll see that our value is three","width":363},{"text":"so, we've opened up a file descriptor who's value is three","width":206},{"text":"in fact, that is expected by specification because if we successfully open a file, we'll get back the lowest unused integer (the lowest unused file descriptor)","width":809},{"text":"as one and two are already being used, we get back three","width":215},{"text":"so just for fun, let's actually close one of the existing file descriptors before we do the open()","width":547},{"text":"so let's close standard error","width":235},{"text":"I'm sorry, we'll close standard out","width":252},{"text":"and, we won't close our own file descriptor until the very end of the program here","width":545},{"text":"so I'm going to move that line down to here","width":164},{"text":"great, so, let's run this","width":457},{"text":"so, what did we do? we opened a file descriptor and now if we look at the output of the program, you'll see we're only getting our dots printed out on standard error","width":720},{"text":"why is that?","width":63},{"text":"what happened to our standard output?","width":63},{"text":"well, we better check out file output.text","width":221},{"text":"and you'll see that everything printed to standard out has been sent to our file","width":435},{"text":"why? because when we called open(), it gave us back a file descriptor for stream number one. and, that is the. that is where all the standard output is going to go","width":895},{"text":"so, all future output is being sent to our file","width":250},{"text":"this is a neat way if you'd like to do logging","width":252},{"text":"and we've just changed our program so that all future output goes to output.text","width":459},{"text":"now what if we've got a problem with open() ?","width":199},{"text":"right now, our code doesn't check for any error","width":221},{"text":"and, a better program would actually check the return values of our different calls","width":369},{"text":"for example, it could be that open() could fail. suppose, for example, we gave it a bad file descriptor","width":675},{"text":"now so we can see what's going on, I'm not going to close standard out anymore.","width":316},{"text":"I'm just going to give it a bad file name","width":234},{"text":"now, our program compiles correctly of course","width":192},{"text":"but this time our file descriptor is negative one","width":211},{"text":"so, we should check that","width":215},{"text":"in fact, if we check the man page of open(), it's always a good idea to check the section called \"return value\"","width":475},{"text":"and you'll see, it's specified here that we'll get back a negative one if an error occurred","width":318},{"text":"so the last thing we'll do today is let's capture that and quit if we get a bad error","width":340},{"text":"so, if fildes equals negative one","width":227},{"text":"a common error is to write equals instead of double equals for comparison","width":371},{"text":"and we want to quit here","width":171},{"text":"so we'll leave our program, so let's exit with a value","width":238},{"text":"to say: \"hey, we couldn't carry on\"","width":250},{"text":"I could've returned zero but I wanted to show you an alternative way to quit a C program is to call exit","width":327},{"text":"and we'll print out an error","width":398},{"text":"so, something bad happened while calling open","width":228},{"text":"so, we'll use perror()","width":269},{"text":"let's run this","width":246},{"text":"and, I get some implicit problem here that we're calling exit(). I need to find the right #include to call for that.","width":734},{"text":"but, you'll see on the lefthand side that we've got open() failed, so that's the part of the error message that I supplied","width":487},{"text":"followed by a colon followed by no such file or directories","width":213},{"text":"so it's complaining that my file name is bad","width":292},{"text":"if I had included a dot here, this is also an invalid file name because a single dot corresponds to the current directory","width":542},{"text":"and, it's complaining that it can't open that because dot corresponds to a directory","width":414},{"text":"so now it's your turn to play. bye!","width":240}]